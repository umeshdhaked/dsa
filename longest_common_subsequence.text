class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        
        int[][] dp = new int[text1.length()+1][text2.length()+1];
//         for (int i=0;i<text1.length();i++) {
//             Arrays.fill(dp[i],-1);
//         }
        
//         return lcs(text1, text1.length() - 1, text2, text2.length() - 1,dp);
        


        for (int l = 1; l <= text1.length(); l++) {
            for (int m = 1; m <= text2.length(); m++) {
                if (text1.charAt(l-1) == text2.charAt(m-1)) {
                    dp[l][m] = 1 + dp[l - 1][m - 1];
                } else {
                    int ans1 = dp[l - 1][m];
                    int ans2 = dp[l][m - 1];
                    dp[l][m] = Math.max(ans1, ans2);
                }
            }
        }

        return dp[text1.length()][text2.length()];
    }

    private static int lcs(String text1, int l, String text2, int m, int[][] dp) {
        if (l < 0 || m < 0) {
            return 0;
        }
        
        if (dp[l][m] != -1) {
            return dp[l][m];
        }

        if (text1.charAt(l) == text2.charAt(m)) {
            dp[l][m] = 1 + lcs(text1, l - 1, text2, m - 1,dp);
            return dp[l][m];
        } else {
            int ans1 = lcs(text1, l - 1, text2, m,dp);
            int ans2 = lcs(text1, l, text2, m - 1,dp);
            dp[l][m] = Math.max(ans1, ans2);
            return Math.max(ans1, ans2);
        }
    }
}