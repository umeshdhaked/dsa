import java.util.*;

public class Main {

    public static void main(String[] args) { // merge two sorted array...
        int vertices = 7;
        int[][] edges = new int[][]{{6, 4}, {6, 2}, {5, 3}, {5, 4}, {3, 0}, {3, 1}, {3, 2}, {4, 1}};

        List<Integer> ans = TopologicalSort.sort(vertices, edges);
        if (ans != null) {
            System.out.println("\ntopological sorted");
            ans.forEach(System.out::println);
        } else {
            System.out.println("null");
        }

    }

}

class TopologicalSort {

    public static List<Integer> sort(int v, int[][] edges) {
        List<Integer> topologicalSorted = new ArrayList<>();

        int[] countParent = new int[v];
        for (int[] edge : edges) {
            int child = edge[1];
            countParent[child]++;
        }

        HashMap<Integer, List<Integer>> adj = new HashMap<>();
        for (int[] edge : edges) { // adjList created....
            int parent = edge[0];
            int child = edge[1];

            if (!adj.containsKey(parent)) {
                ArrayList<Integer> childList = new ArrayList<>();
                childList.add(child);
                adj.put(parent, childList);
                continue;
            }

            adj.get(parent).add(child);
        }

//        Vector<Integer> ansDFS = new Vector<>();
//        Vector<Integer> ansBFS = new Vector<>();
//        for (int k = v - 1; k >= 0; k--) {
////            System.out.println("printfromStartingNode-" + k);
//            printDFS(adj, k, ansDFS);
//            printBFS(adj, k, ansBFS);
//        }
//        System.out.println("print graph traversal DFS");
//        ansDFS.forEach((o) -> {
//            System.out.print(o + ",");
//        });
//        System.out.println("\nprint graph traversal BFS");
//        ansBFS.forEach((o) -> {
//            System.out.print(o + ",");
//        });

        Queue<Integer> sources = new ArrayDeque<>();
        for (int i = 0; i < v; i++) {
            if (countParent[i] == 0)
                sources.add(i);
        }

        while (!sources.isEmpty()) {
            int source = sources.poll();
            List<Integer> childsOfSource = adj.get(source);

            if (childsOfSource != null) {
                for (int chld : childsOfSource) {
                    countParent[chld]--;
                    if (countParent[chld] == 0) {
                        sources.add(chld);
                    }
                }
            }

            topologicalSorted.add(source);
        }

        if (topologicalSorted.size() != v) return null;


        return topologicalSorted;
    }

    static boolean[] visitedDFS = new boolean[7];

    private static void printDFS(HashMap<Integer, List<Integer>> adj, Integer currNode, Vector<Integer> ans) {

        if (!visitedDFS[currNode]) {
            /*System.out.println(currNode);*/
            ans.add(currNode);

            visitedDFS[currNode] = true;

            List<Integer> adjNodes = adj.get(currNode);
            if (adjNodes == null) {
                return;
            }
            for (int adjN : adjNodes) {
                if (!visitedDFS[adjN]) {
                    printDFS(adj, adjN, ans);
                }
            }
        }
    }

    static boolean[] visitedBFS = new boolean[7];

    private static void printBFS(HashMap<Integer, List<Integer>> adj, Integer start, Vector<Integer> ans) {

        if (!visitedBFS[start]) {
            Queue<Integer> queue = new ArrayDeque<>();
            queue.add(start);

            while (!queue.isEmpty()) {
                int q = queue.poll();
                if (!visitedBFS[q]) {
                    ans.add(q);
//                    System.out.println(q);
                    visitedBFS[q] = true;
                    List<Integer> adjNodes = adj.get(q);
                    if (adjNodes == null) {
                        continue;
                    }
                    for (int adjNode : adjNodes) {
                        if (!visitedBFS[adjNode]) {
                            queue.add(adjNode);
                        }
                    }
                }
            }
        }

    }


}



